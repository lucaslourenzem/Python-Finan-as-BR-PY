asyncio_mode = auto
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
addopts = 
    --verbose
    --cov=src
    --cov-report=html
    --cov-report=term-missing
    -v
markers =
    unit: marca testes unitários
    integration: marca testes de integração
    slow: marca testes lentos
EOF

echo "✅ pytest.ini criado"
PASSO 9: Criar pyproject.toml
bash
cat > pyproject.toml << 'EOF'
[project]
name = "financial-api"
version = "1.0.0"
description = "API financeira brasileira com suporte CNAB e NFe"
requires-python = ">=3.11"
authors = [
    {name = "Seu Nome", email = "seu@email.com"}
]
readme = "README.md"

[project.optional-dependencies]
dev = [
    "black>=23.12.1",
    "ruff>=0.1.9",
    "mypy>=1.8.0",
    "pytest>=8.3.3",
]

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
select = ["E", "F", "I", "N"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
EOF

echo "✅ pyproject.toml criado"
PASSO 10: Criar .env local
bash
cp .env.example .env
echo "✅ .env criado (edite com seus valores reais)"
PASSO 11: Popular README.md
bash
cat > README.md << 'EOF'
# 💰 Financial API - Sistema Financeiro Brasileiro

API REST para automação de processos financeiros e fiscais no Brasil.

## 🚀 Tecnologias

- Python 3.11+
- FastAPI 0.115+
- PostgreSQL 16+
- Redis 7+
- Docker & Docker Compose

## 📋 Domínios

- **Fiscal**: Emissão de NFS-e, NFC-e
- **RH**: Cálculos de folha de pagamento
- **Compliance**: Verificação de pendências fiscais
- **Financeiro**: CNAB, pagamentos bancários

## 🔧 Instalação

### 1. Clonar repositório
```bash
git clone <seu-repo>
cd <nome-projeto>
```

### 2. Criar ambiente virtual
```bash
python -m venv .venv
source .venv/bin/activate  # Linux/Mac
.venv\Scripts\activate     # Windows
```

### 3. Instalar dependências
```bash
pip install -r requirements.txt
```

### 4. Instalar python-cnab via Git
```bash
pip install git+https://github.com/scardine/cnab.git
```

### 5. Configurar variáveis de ambiente
```bash
cp .env.example .env
# Edite .env com suas configurações
```

### 6. Rodar servidor
```bash
uvicorn src.main:app --reload --port 8000
```

## 📖 Documentação

- Swagger UI: http://localhost:8000/api/docs
- ReDoc: http://localhost:8000/api/redoc

## 🧪 Testes
```bash
# Rodar todos os testes
pytest

# Com coverage
pytest --cov=src --cov-report=html

# Ver relatório
open htmlcov/index.html
```

## 🐳 Docker
```bash
# Subir todos os serviços
docker-compose up -d

# Ver logs
docker-compose logs -f api

# Parar serviços
docker-compose down
```

## 📁 Estrutura
```
src/
├── fiscal/        # Domínio fiscal (NFS-e)
├── rh/            # Domínio RH (folha)
├── compliance/    # Domínio compliance
├── financeiro/    # Domínio financeiro (CNAB)
└── core/          # Código compartilhado
```

## ⚙️ Configuração

Edite `.env` com:
- Credenciais de banco de dados
- Tokens de APIs (Focus NFe, etc)
- Certificados digitais
- Configurações CNAB

## 🔒 Segurança

⚠️ **NUNCA** versione:
- Arquivo `.env` com secrets reais
- Certificados digitais (`.pfx`, `.pem`)
- Chaves privadas
- Credenciais de produção

## 📝 Status do Projeto

- [x] Configuração inicial
- [ ] Módulo Fiscal (NFS-e)
- [ ] Módulo RH (Folha)
- [ ] Módulo Compliance
- [ ] Módulo Financeiro (CNAB)
- [ ] Testes completos
- [ ] Deploy

## 📄 Licença

MIT
EOF

echo "✅ README.md criado"
PASSO 12: Criar arquivo init.py no src (IMPORTANTE)
bash
touch src/__init__.py
echo "✅ src/__init__.py criado"
PASSO 13: Verificar estrutura completa
bash
# Ver árvore de diretórios
tree -L 3 -I '__pycache__|.venv|*.pyc' src/

# Ou se não tiver tree:
find src -type f -name "*.py" | head -20
🔄 INSTALAÇÃO E VERIFICAÇÃO
Execute agora para instalar tudo e testar:

bash
# 1. Criar ambiente virtual (se ainda não tiver)
python -m venv .venv

# 2. Ativar ambiente
# Linux/Mac:
source .venv/bin/activate
# Windows:
.venv\Scripts\activate

# 3. Instalar dependências
pip install --upgrade pip
pip install -r requirements.txt

# 4. Instalar python-cnab via Git
pip install git+https://github.com/scardine/cnab.git

# 5. Testar se API inicia
uvicorn src.main:app --reload --port 8000
```

Se tudo der certo, você verá:
```
INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process
INFO:     Started server process
INFO:     Waiting for application startup.
INFO:     Application startup complete.
✅ CHECKLIST DE VALIDAÇÃO
Execute cada comando e marque ✅:

bash
# 1. Verificar se .gitignore existe
[ ] ls -la .gitignore

# 2. Verificar se API inicia sem erros
[ ] uvicorn src.main:app --reload --port 8000

# 3. Testar endpoint health
[ ] curl http://localhost:8000/health

# 4. Acessar documentação Swagger
[ ] Abrir: http://localhost:8000/api/docs

# 5. Testar endpoints de ping
[ ] curl http://localhost:8000/api/v1/fiscal/ping
[ ] curl http://localhost:8000/api/v1/rh/ping
[ ] curl http://localhost:8000/api/v1/compliance/ping
[ ] curl http://localhost:8000/api/v1/financeiro/ping

# 6. Rodar testes (mesmo que vazios)
[ ] pytest

# 7. Verificar formatação
[ ] black --check src/

# 8. Verificar linting
[ ] ruff check src/
📊 CORREÇÕES DO CHECKLIST INICIAL
Comparando com o checklist que você mencionou:

Item Checklist	Status Anterior	Status Atual	Como Corrigiu
Criar ambiente virtual	❌ Não feito	✅ Comando fornecido	python -m venv .venv
Instalar dependências	⚠️ Incompleto	✅ Completo	requirements.txt atualizado
Configurar .env	❌ Não existia	✅ Criado	cp .env.example .env
Certificado digital	⏸️ Pendente	⏸️ Para depois	Opcional para testes
Configurar banco PostgreSQL	⏸️ Pendente	⏸️ Para depois	Docker Compose pronto
Executar migrações Alembic	⏸️ Pendente	⏸️ Para depois	alembic.ini pendente
Configurar Redis	⏸️ Pendente	⏸️ Para depois	Docker Compose pronto
Testes unitários	❌ Não havia	⚠️ Estrutura criada	pytest.ini criado
Documentar DPO/LGPD	⏸️ Pendente	⏸️ Para depois	Fase posterior
.gitignore	❌ CRÍTICO	✅ RESOLVIDO	Criado no Passo 1
Config settings	❌ CRÍTICO	✅ RESOLVIDO	src/core/config.py
Imports corretos	❌ CRÍTICO	✅ RESOLVIDO	main.py corrigido
🎯 PRÓXIMOS PASSOS RECOMENDADOS
Agora que a estrutura está correta, siga esta ordem:

1. HOJE - Validar configuração (30 min)
bash
# Confirmar que tudo funciona
uvicorn src.main:app --reload --port 8000
# Acessar: http://localhost:8000/api/docs
# Testar os 4 endpoints /ping
2. Esta Semana - Semana 1 do seu plano (8-10h)
Estudar FastAPI básico (tutoriais oficial)
Implementar 3 endpoints simples em cada domínio
Escrever primeiros testes
3. Próxima Semana - Semana 2 do seu plano (8-10h)
Implementar modelos Pydantic
Criar schemas de request/response
Documentar endpoints no Swagger
⚠️ AVISOS IMPORTANTES
🔴 Antes de fazer commit:
bash
# Verifique se .env NÃO vai ser commitado
git status

# Se aparecer .env na lista:
git rm --cached .env
git add .gitignore
git commit -m "Add .gitignore to protect secrets"
🟡 Dependências que precisam atenção:
python-cnab: Instalar via Git (não via pip)
bash
pip install git+https://github.com/scardine/cnab.git
xmlsec: Pode precisar de libs do sistema
bash
# Ubuntu/Debian
sudo apt-get install libxml2-dev libxmlsec1-dev libxmlsec1-openssl

# MacOS
brew install libxmlsec1
lxml: Pode precisar de compilação
bash
# Se der erro, instale as dependências do sistema primeiro
```

---

# 🎓 COMO USAR ESTE GUIA COM O CLAUDE

### Quando tiver problemas:
```
"Segui o guia de correção mas estou com erro:
[cole o erro aqui]

Estou na etapa: [número do passo]
Comando executado: [comando que deu erro]"
```

### Para validar se está tudo certo:
```
"Completei todas as correções do guia.
Minha API está rodando em http://localhost:8000
Prints:
- /health retorna: [cole resposta]
- /api/docs mostra: [descreva]
Posso começar a Semana 1 do plano de estudos?"
Agora execute os passos acima E ME CONFIRME quando terminar! Vou te ajudar se encontrar algum erro. 🚀


